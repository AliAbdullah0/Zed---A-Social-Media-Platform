generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(cuid())
  email String @unique
  username String @unique
  clerkId String @unique
  name String?
  bio String?
  image String?
  location String?
  website String?
  createdAt DateTime @default(now()) // member since e.g 2020
  updatedAt DateTime @updatedAt

  // Relations

  posts Post[] // user can have multiple posts but each post can be owned by a single user One-to-Many
  comments Comment[] // One-to-Many
  likes Like[] // One-to-Many

  followers Follows[] @relation("following") // users who follow this user
  following Follows[] @relation("follower") // users who this user follows

  notifications Notification[] @relation("userNotifications") // notifications recived
  notificationsCreated Notification[] @relation("notificationCreator") //notifications create by user
}

model Post{
  id String @id @default(cuid())
  authorId String
  content String
  image String?
  createdAt DateTime @default(now()) // member since e.g 2020
  updatedAt DateTime @updatedAt

  author User @relation(fields:[authorId],references: [id],onDelete: Cascade) // delete all posts related to author if author is deleted
  comments Comment[]
  like Like[]
  notifications Notification[]
}

model Comment{
  id String @id @default(cuid())
  content String
  authorId String
  postId String

  createdAt DateTime @default(now()) // member since e.g 2020
  updatedAt DateTime @updatedAt

  // Relations
  author User @relation(fields: [authorId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)
  notifications Notification[]
  @@index([authorId,postId]) // composite index for faster queries

}

model Like{
  id String @id @default(cuid())
  postId String
  userId String
  createdAt DateTime @default(now()) // member since e.g 2020

  // Relations
  user User @relation(fields: [userId],references: [id],onDelete: Cascade)
  post Post @relation(fields: [postId],references: [id],onDelete: Cascade)

  @@index([userId,postId])
  @@unique([userId,postId]) // this prevents same user from liking twice
}

model Follows{
  followerId String
  followingId String
  createdAt DateTime @default(now()) // member since e.g 2020

  // Relations
  follower User @relation("follower",fields: [followerId],references: [id],onDelete: Cascade)
  following User @relation("following",fields: [followingId],references: [id],onDelete: Cascade)

  @@index([followerId,followingId])
  @@id([followerId,followingId]) // composite promary key to duplicate follows
}

model Notification{
  id String @id @default(cuid())
  userId String
  creatorId String
  type NotificationType
  read Boolean @default(false)
  postId String?
  commentId String?
  createdAt DateTime @default(now()) // member since e.g 2020

  user User @relation("userNotifications",fields: [userId],references: [id],onDelete: Cascade)
  creator User @relation("notificationCreator",fields: [creatorId],references: [id],onDelete: Cascade)

  post Post? @relation(fields: [postId],references: [id],onDelete: Cascade)

  comment Comment? @relation(fields: [commentId],references: [id],onDelete: Cascade)

  @@index([userId,createdAt])
  
}

enum NotificationType {
  LIKE
  Comment
  FOLLOW
}